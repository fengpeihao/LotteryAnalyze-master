package com.fph.lotteryanalyze.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ETCFBEAN".
*/
public class ETCFBeanDao extends AbstractDao<ETCFBean, Long> {

    public static final String TABLENAME = "ETCFBEAN";

    /**
     * Properties of entity ETCFBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OpenNumber = new Property(1, String.class, "openNumber", false, "OPEN_NUMBER");
        public final static Property Periods = new Property(2, String.class, "periods", false, "PERIODS");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property FirstNumber = new Property(4, String.class, "firstNumber", false, "FIRST_NUMBER");
        public final static Property SecondNumber = new Property(5, String.class, "secondNumber", false, "SECOND_NUMBER");
        public final static Property ThreeNumber = new Property(6, String.class, "threeNumber", false, "THREE_NUMBER");
        public final static Property FourNumber = new Property(7, String.class, "fourNumber", false, "FOUR_NUMBER");
        public final static Property FiveNumber = new Property(8, String.class, "fiveNumber", false, "FIVE_NUMBER");
    }


    public ETCFBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ETCFBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ETCFBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OPEN_NUMBER\" TEXT," + // 1: openNumber
                "\"PERIODS\" TEXT UNIQUE ," + // 2: periods
                "\"DATE\" TEXT," + // 3: date
                "\"FIRST_NUMBER\" TEXT," + // 4: firstNumber
                "\"SECOND_NUMBER\" TEXT," + // 5: secondNumber
                "\"THREE_NUMBER\" TEXT," + // 6: threeNumber
                "\"FOUR_NUMBER\" TEXT," + // 7: fourNumber
                "\"FIVE_NUMBER\" TEXT);"); // 8: fiveNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ETCFBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ETCFBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openNumber = entity.getOpenNumber();
        if (openNumber != null) {
            stmt.bindString(2, openNumber);
        }
 
        String periods = entity.getPeriods();
        if (periods != null) {
            stmt.bindString(3, periods);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String firstNumber = entity.getFirstNumber();
        if (firstNumber != null) {
            stmt.bindString(5, firstNumber);
        }
 
        String secondNumber = entity.getSecondNumber();
        if (secondNumber != null) {
            stmt.bindString(6, secondNumber);
        }
 
        String threeNumber = entity.getThreeNumber();
        if (threeNumber != null) {
            stmt.bindString(7, threeNumber);
        }
 
        String fourNumber = entity.getFourNumber();
        if (fourNumber != null) {
            stmt.bindString(8, fourNumber);
        }
 
        String fiveNumber = entity.getFiveNumber();
        if (fiveNumber != null) {
            stmt.bindString(9, fiveNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ETCFBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String openNumber = entity.getOpenNumber();
        if (openNumber != null) {
            stmt.bindString(2, openNumber);
        }
 
        String periods = entity.getPeriods();
        if (periods != null) {
            stmt.bindString(3, periods);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String firstNumber = entity.getFirstNumber();
        if (firstNumber != null) {
            stmt.bindString(5, firstNumber);
        }
 
        String secondNumber = entity.getSecondNumber();
        if (secondNumber != null) {
            stmt.bindString(6, secondNumber);
        }
 
        String threeNumber = entity.getThreeNumber();
        if (threeNumber != null) {
            stmt.bindString(7, threeNumber);
        }
 
        String fourNumber = entity.getFourNumber();
        if (fourNumber != null) {
            stmt.bindString(8, fourNumber);
        }
 
        String fiveNumber = entity.getFiveNumber();
        if (fiveNumber != null) {
            stmt.bindString(9, fiveNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ETCFBean readEntity(Cursor cursor, int offset) {
        ETCFBean entity = new ETCFBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // openNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // periods
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // secondNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // threeNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fourNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // fiveNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ETCFBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOpenNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPeriods(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSecondNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setThreeNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFourNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFiveNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ETCFBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ETCFBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ETCFBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
