package com.fph.lotteryanalyze.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BALL_ENTITY".
*/
public class BallEntityDao extends AbstractDao<BallEntity, Long> {

    public static final String TABLENAME = "BALL_ENTITY";

    /**
     * Properties of entity BallEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdForOmit = new Property(1, Long.class, "idForOmit", false, "ID_FOR_OMIT");
        public final static Property Number = new Property(2, String.class, "number", false, "NUMBER");
        public final static Property ColorType = new Property(3, String.class, "colorType", false, "COLOR_TYPE");
        public final static Property TotalCount = new Property(4, int.class, "totalCount", false, "TOTAL_COUNT");
        public final static Property MaxOmit = new Property(5, int.class, "maxOmit", false, "MAX_OMIT");
        public final static Property MaxContinuous = new Property(6, int.class, "maxContinuous", false, "MAX_CONTINUOUS");
        public final static Property CurrentOmit = new Property(7, int.class, "currentOmit", false, "CURRENT_OMIT");
        public final static Property PreOmit = new Property(8, int.class, "preOmit", false, "PRE_OMIT");
        public final static Property TotalOmitCount = new Property(9, int.class, "totalOmitCount", false, "TOTAL_OMIT_COUNT");
        public final static Property BeforehandFrequency = new Property(10, float.class, "beforehandFrequency", false, "BEFOREHAND_FREQUENCY");
        public final static Property AveOmitCount = new Property(11, String.class, "aveOmitCount", false, "AVE_OMIT_COUNT");
        public final static Property AriseFrequency = new Property(12, String.class, "ariseFrequency", false, "ARISE_FREQUENCY");
        public final static Property AnaplerosisFrequency = new Property(13, float.class, "anaplerosisFrequency", false, "ANAPLEROSIS_FREQUENCY");
        public final static Property ContinuousFrequency = new Property(14, float.class, "continuousFrequency", false, "CONTINUOUS_FREQUENCY");
    }

    private Query<BallEntity> omitEntity_BallEntitiesQuery;

    public BallEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BallEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BALL_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_FOR_OMIT\" INTEGER," + // 1: idForOmit
                "\"NUMBER\" TEXT," + // 2: number
                "\"COLOR_TYPE\" TEXT," + // 3: colorType
                "\"TOTAL_COUNT\" INTEGER NOT NULL ," + // 4: totalCount
                "\"MAX_OMIT\" INTEGER NOT NULL ," + // 5: maxOmit
                "\"MAX_CONTINUOUS\" INTEGER NOT NULL ," + // 6: maxContinuous
                "\"CURRENT_OMIT\" INTEGER NOT NULL ," + // 7: currentOmit
                "\"PRE_OMIT\" INTEGER NOT NULL ," + // 8: preOmit
                "\"TOTAL_OMIT_COUNT\" INTEGER NOT NULL ," + // 9: totalOmitCount
                "\"BEFOREHAND_FREQUENCY\" REAL NOT NULL ," + // 10: beforehandFrequency
                "\"AVE_OMIT_COUNT\" TEXT," + // 11: aveOmitCount
                "\"ARISE_FREQUENCY\" TEXT," + // 12: ariseFrequency
                "\"ANAPLEROSIS_FREQUENCY\" REAL NOT NULL ," + // 13: anaplerosisFrequency
                "\"CONTINUOUS_FREQUENCY\" REAL NOT NULL );"); // 14: continuousFrequency
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BALL_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BallEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long idForOmit = entity.getIdForOmit();
        if (idForOmit != null) {
            stmt.bindLong(2, idForOmit);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String colorType = entity.getColorType();
        if (colorType != null) {
            stmt.bindString(4, colorType);
        }
        stmt.bindLong(5, entity.getTotalCount());
        stmt.bindLong(6, entity.getMaxOmit());
        stmt.bindLong(7, entity.getMaxContinuous());
        stmt.bindLong(8, entity.getCurrentOmit());
        stmt.bindLong(9, entity.getPreOmit());
        stmt.bindLong(10, entity.getTotalOmitCount());
        stmt.bindDouble(11, entity.getBeforehandFrequency());
 
        String aveOmitCount = entity.getAveOmitCount();
        if (aveOmitCount != null) {
            stmt.bindString(12, aveOmitCount);
        }
 
        String ariseFrequency = entity.getAriseFrequency();
        if (ariseFrequency != null) {
            stmt.bindString(13, ariseFrequency);
        }
        stmt.bindDouble(14, entity.getAnaplerosisFrequency());
        stmt.bindDouble(15, entity.getContinuousFrequency());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BallEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long idForOmit = entity.getIdForOmit();
        if (idForOmit != null) {
            stmt.bindLong(2, idForOmit);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String colorType = entity.getColorType();
        if (colorType != null) {
            stmt.bindString(4, colorType);
        }
        stmt.bindLong(5, entity.getTotalCount());
        stmt.bindLong(6, entity.getMaxOmit());
        stmt.bindLong(7, entity.getMaxContinuous());
        stmt.bindLong(8, entity.getCurrentOmit());
        stmt.bindLong(9, entity.getPreOmit());
        stmt.bindLong(10, entity.getTotalOmitCount());
        stmt.bindDouble(11, entity.getBeforehandFrequency());
 
        String aveOmitCount = entity.getAveOmitCount();
        if (aveOmitCount != null) {
            stmt.bindString(12, aveOmitCount);
        }
 
        String ariseFrequency = entity.getAriseFrequency();
        if (ariseFrequency != null) {
            stmt.bindString(13, ariseFrequency);
        }
        stmt.bindDouble(14, entity.getAnaplerosisFrequency());
        stmt.bindDouble(15, entity.getContinuousFrequency());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BallEntity readEntity(Cursor cursor, int offset) {
        BallEntity entity = new BallEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idForOmit
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // colorType
            cursor.getInt(offset + 4), // totalCount
            cursor.getInt(offset + 5), // maxOmit
            cursor.getInt(offset + 6), // maxContinuous
            cursor.getInt(offset + 7), // currentOmit
            cursor.getInt(offset + 8), // preOmit
            cursor.getInt(offset + 9), // totalOmitCount
            cursor.getFloat(offset + 10), // beforehandFrequency
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // aveOmitCount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ariseFrequency
            cursor.getFloat(offset + 13), // anaplerosisFrequency
            cursor.getFloat(offset + 14) // continuousFrequency
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BallEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdForOmit(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColorType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalCount(cursor.getInt(offset + 4));
        entity.setMaxOmit(cursor.getInt(offset + 5));
        entity.setMaxContinuous(cursor.getInt(offset + 6));
        entity.setCurrentOmit(cursor.getInt(offset + 7));
        entity.setPreOmit(cursor.getInt(offset + 8));
        entity.setTotalOmitCount(cursor.getInt(offset + 9));
        entity.setBeforehandFrequency(cursor.getFloat(offset + 10));
        entity.setAveOmitCount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAriseFrequency(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAnaplerosisFrequency(cursor.getFloat(offset + 13));
        entity.setContinuousFrequency(cursor.getFloat(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BallEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BallEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BallEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ballEntities" to-many relationship of OmitEntity. */
    public List<BallEntity> _queryOmitEntity_BallEntities(Long idForOmit) {
        synchronized (this) {
            if (omitEntity_BallEntitiesQuery == null) {
                QueryBuilder<BallEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdForOmit.eq(null));
                omitEntity_BallEntitiesQuery = queryBuilder.build();
            }
        }
        Query<BallEntity> query = omitEntity_BallEntitiesQuery.forCurrentThread();
        query.setParameter(0, idForOmit);
        return query.list();
    }

}
